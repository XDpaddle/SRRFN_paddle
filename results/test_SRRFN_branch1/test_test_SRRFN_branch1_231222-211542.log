23-12-22 21:15:42.491 - INFO:   name: test_SRRFN_branch1
  model: sr
  distortion: sr
  scale: 3
  crop_border: None
  gpu_ids: [0]
  network_G:[
    which_model_G: SRRFN
    scale: 3
  ]
  datasets:[
    test1:[
      name: set5
      mode: LQGT
      dataroot_GT: /home/data/disk2/wsq/Datasets/DIV2K/DIV2K_valid_HR/
      dataroot_LQ: /home/data/disk2/wsq/Datasets/DIV2K/DIV2K_valid_LR_bicubic/X3/
      phase: test1
      scale: 3
      data_type: img
    ]
  ]
  path:[
    pretrain_model_G: trans_weights\trans_SRRFN_x3.pdparams
    root: /home/data/disk3/zl/code/SRRFN_paddle
    results_root: /home/data/disk3/zl/code/SRRFN_paddle/results/test_SRRFN_branch1
    log: /home/data/disk3/zl/code/SRRFN_paddle/results/test_SRRFN_branch1
  ]
  is_train: False

23-12-22 21:15:42.493 - INFO: Dataset [LQGTDataset - set5] is created.
23-12-22 21:15:42.493 - INFO: Number of test images in [set5]: 100
23-12-22 21:15:43.375 - INFO: Network G structure: SRRFN, with parameters: 4,250,267
23-12-22 21:15:43.376 - INFO: SRRFN(
  (sub_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (add_mean): MeanShift(3, 3, kernel_size=[1, 1], data_format=NCHW)
  (head): Sequential(
    (0): Conv2D(3, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (body): Sequential(
    (0): ResidualGroup(
      (body): Sequential(
        (0): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (1): ResidualGroup(
      (body): Sequential(
        (0): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (2): ResidualGroup(
      (body): Sequential(
        (0): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (3): ResidualGroup(
      (body): Sequential(
        (0): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (4): ResidualGroup(
      (body): Sequential(
        (0): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (1): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (2): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (3): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (4): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (5): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (6): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (7): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (8): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (9): ResidualBlock(
          (body): Sequential(
            (0): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
            (1): ReLU(name=True)
            (2): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
          )
        )
        (10): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
      )
    )
    (5): Conv2D(64, 64, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
  (tail): Sequential(
    (0): Upsampler(
      (0): Conv2D(64, 576, kernel_size=[3, 3], padding=1, data_format=NCHW)
      (1): PixelShuffle(upscale_factor=3)
    )
    (1): Conv2D(64, 3, kernel_size=[3, 3], padding=1, data_format=NCHW)
  )
)
23-12-22 21:15:43.376 - INFO: Loading model for G [trans_weights\trans_SRRFN_x3.pdparams] ...
23-12-22 21:15:43.421 - INFO: Model [SRModel] is created.
23-12-22 21:15:43.421 - INFO: 
Testing [set5]...
23-12-22 21:15:52.362 - INFO: 0801                 - PSNR: 27.316894 dB; SSIM: 0.764746; PSNR_Y: 29.014520 dB; SSIM_Y: 0.792006.
23-12-22 21:15:59.745 - INFO: 0802                 - PSNR: 31.143019 dB; SSIM: 0.768506; PSNR_Y: 33.792887 dB; SSIM_Y: 0.844568.
23-12-22 21:16:08.111 - INFO: 0803                 - PSNR: 31.441800 dB; SSIM: 0.831900; PSNR_Y: 33.947994 dB; SSIM_Y: 0.877219.
